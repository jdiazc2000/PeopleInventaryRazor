@using Entities
@using Business
@inject SweetAlertService SweetAlert
@inject ILoaderServices LoaderServices

<button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#crearRolModal"><i class="bi bi-plus"></i> Crear rol nuevo</button>
<hr />


@{
    if (spinnerloading)
    {
        @((MarkupString)html)
    }
    else
    {

        <div class="table-responsive" style="max-width: 99rem; height:33rem; overflow: scroll;">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var rol in TempObRoles)
                    {
                        <tr>
                            <td>@rol.RoleName</td>
                            <td>
                                <a class="btn btn-success" data-bs-toggle="modal" data-bs-target="#actualizarRolModal" @onclick="() => PasarRolId(rol.RoleID)"><i class="bi bi-pencil-square"></i> Actualizar</a>
                                <a class="btn btn-danger" @onclick="() => DeleteRol(rol.RoleID)"><i class="bi bi-trash"></i> Eliminar</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

<!-- Crear Rol Modal -->
<div class="modal fade" id="crearRolModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="crearRolModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Crear un nuevo rol</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">Correo:</label>
                <input type="text" class="form-control" placeholder="Ingrese el nombre del Rol" @bind-value="NombreRol" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="CreateRol">Crear Rol</button>
            </div>
        </div>
    </div>
</div>

<!-- Actulizar Rol Modal -->
<div class="modal fade" id="actualizarRolModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="actualizarRolModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Ingrese el nuevo nombre del rol: @NombreRol</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">Correo:</label>
                <input type="text" class="form-control" placeholder="Ingrese el nuevo nombre del Rol" @bind-value="NombreRol" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => UpdateRolName(IdRol,NombreRol)">Actualizar Rol</button>
            </div>
        </div>
    </div>
</div>


@code {
    List<RolesEntity> ObRoles = new List<RolesEntity>();
    List<RolesEntity> TempObRoles = new List<RolesEntity>();

    int IdRol;
    string NombreRol;

    bool spinnerloading = true;
    string html;

    protected override async Task OnInitializedAsync()
    {
        html = await LoaderServices.GetLoaderComponent("Cargando...");
        TurnOnLoading();
        ObRoles = await Task.Run(() => TB_Roles.RolList());
        TempObRoles = ObRoles;
        TurnOffLoading();
    }

    private void TurnOnLoading()
    {
        spinnerloading = true;
    }

    private void TurnOffLoading()
    {
        spinnerloading = false;
    }

    private void PasarRolId(int id)
    {
        IdRol = id;
        NombreRol = TB_Roles.GetRolNameById(id);
    }

    private async Task CreateRol()
    {
        if (!string.IsNullOrEmpty(NombreRol))
        {
            SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Deseas añadir siguiente rol? " + NombreRol,
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "No"
                });


            if (!string.IsNullOrEmpty(resultado.Value))
            {
                TB_Roles.CreateRol(NombreRol);
                TempObRoles = TB_Roles.RolList();

                await SweetAlert.FireAsync(
                "El rol " + NombreRol + " fue añadido con éxito.",
                "El rol " + NombreRol + " fue añadido de manera satisfactoria.",
                SweetAlertIcon.Success
                );

                NombreRol = "";
            }
        }
        else
        {
            await SweetAlert.FireAsync(
              "Ingrese el nombre del rol.",
              "Debe de ingresar un nombre para el rol.",
              SweetAlertIcon.Error
              );
        }


    }

    private async Task UpdateRolName(int id, string NuevoNombre)
    {
        if (IdRol != 0 && !string.IsNullOrEmpty(NombreRol))
        {
            SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Deseas actualizar el siguiente rol? " + NombreRol,
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "No"
                });


            if (!string.IsNullOrEmpty(resultado.Value))
            {
                TB_Roles.UpdateRol(id, NuevoNombre);
                TempObRoles = TB_Roles.RolList();

                await SweetAlert.FireAsync(
                "El rol fue actualizado con éxito.",
                "El rol fue actualizado de manera satisfactoria.",
                SweetAlertIcon.Success
                );

                IdRol = 0;
                NombreRol = "";
            }
        }
        else
        {
            await SweetAlert.FireAsync(
              "Ingrese el nombre actualizado del rol seleccionado.",
              "Debe de ingresar un nuevo nombre para el rol.",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task DeleteRol(int id)
    {
        var RolName = TB_Roles.GetRolNameById(id);

        if (id != null)
        {
            SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Deseas eliminar el siguiente rol? " + RolName,
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "No"
                });


            if (!string.IsNullOrEmpty(resultado.Value))
            {
                TB_Roles.RemoveRol(id);

                await SweetAlert.FireAsync(
                "El rol " + RolName +  " fue eliminado con éxito.",
                "El rol " + RolName +  " fue eliminado de manera satisfactoria.",
                SweetAlertIcon.Success
                );

                TempObRoles = TB_Roles.RolList();
            }
        }
    }
    
}
