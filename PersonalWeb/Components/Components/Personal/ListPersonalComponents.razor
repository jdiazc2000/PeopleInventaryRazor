@using Entities
@using Business
@using ClosedXML.Excel;
@using System.Net;
@using System.Data;
@using System.Diagnostics;
@using System.Globalization;
@using PdfSharpCore.Pdf
@using PdfSharpCore.Drawing
@using System.IO
@using BlazorDownloadFile
@using MailKit.Net.Smtp;
@using MimeKit;
@using System.Text.RegularExpressions;
@using BlazorBootstrap;
@using PersonalWeb.Services
@inject IJSRuntime _jsService;
@inject SweetAlertService SweetAlert;
@inject IExportDocumentsService ExpDocServ;
@inject ICalcServices CalcServices;

<Preload LoadingText="Cargando..." />

<div class="mb-3">
    <div class="row justify-content-md-center mb-3">
        <div class="col-sm">
            <label class="form-label">ID:</label>
            <input type="text" class="form-control" placeholder="Ingrese ID del empleado" @bind-value="ID" maxlength="6">
        </div>
        <div class="col-sm">
            <label class="form-label">Dni:</label>
            <input type="text" class="form-control" placeholder="Ingrese DNI" @bind-value="Dni"/>
        </div>
        <div class="col-sm">
            <label class="form-label">Nombre:</label>
            <input type="text" class="form-control" placeholder="Ingrese Nombre" @bind-value="Nombre" />
        </div>
    </div>
    <div class="row justify-content-md-center mb-3">
        <div class="col-sm">
             <label class="form-label">Fecha de ingreso:</label>
            <InputDate @bind-Value="FechaIngreso" class="form-control" />
        </div>
        <div class="col-sm">
            <label class="form-label">Fecha de nacimiento:</label>
            <InputDate @bind-Value="FechaNacimiento" class="form-control" />
        </div>
          <div class="col-sm">
            <label class="form-label">Estado:</label>
             <InputSelect @bind-Value="Estado" class="form-control">
                <option value="">Seleccione un estado</option>
                <option value="Activo">Activo</option>
                <option value="Inactivo">Inactivo</option>
            </InputSelect>
        </div>
    </div>

    <div class="row justify-content-md-center mb-3">
      
        <div class="col-sm">
            <label class="form-label">Equipo:</label>
            <InputSelect @bind-Value="Equipo" class="form-control">
                <option value="">Seleccione un equipo</option>
                <option value="No">No</option>
                <option value="Laptop">Laptop</option>
            </InputSelect>
        </div>
         <div class="col-sm">
            <label class="form-label">Departamento:</label>
            <select class="form-control" @onchange="FilterProvince">
                <option value="">Seleccione un departamento</option>
                @{
                    foreach(var departamento in LstDepartamentos)
                    {
                        <option value="@departamento.id">@departamento.name</option>
                    }
                }
            </select>
        </div>
        <div class="col-sm">
            <label class="form-label">Provincia:</label>
            <InputSelect class="form-control" Value="@Provincia" ValueExpression="@(()=>@Provincia)" ValueChanged="@((string value) => FilterDistrict(value))">
                <option value="">Seleccione una provincia</option">
                @{
                    foreach (var provincia in LstProvincias)
                    {
                        <option value="@provincia.id">@provincia.name</option>
                    }
                }
            </InputSelect>
        </div>
    </div>

    <div class="row justify-content-md-center mb-3">
        <div class="col-sm">
            <label class="form-label">Distrito:</label>
            <InputSelect class="form-control" Value="@Distrito" ValueExpression="@(()=>@Distrito)" ValueChanged="@((string value) => GetDistrictName(value))">
                <option value="">Seleccione un distrito</option>
                @{
                    foreach (var distrito in LstDistritos)
                    {
                        <option value="@distrito.id">@distrito.name</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
  
    <div style="
    display: flex;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-items: center;
    gap: 1rem;
    "
        > 
        <button @onclick="ChangedFilters" class="btn btn-primary"><i class="bi bi-search"></i> Buscar</button>
        <button @onclick="ExportExcel" class="btn btn-success"><i class="bi bi-file-earmark-excel"></i> Exportar a Excel</button>
        <button @onclick="ExportToPdf" class="btn btn-danger"><i class="bi bi-file-earmark-pdf"></i> Exportar a PDF</button>
        <button  data-bs-toggle="modal" data-bs-target="#staticBackdrop" class="btn btn-info"><i class="bi bi-file-earmark-pdf"></i> Exportar a PDF y enviar por correo</button>
    </div>
</div

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Ingrese el correo electrónico a donde desee enviar el archivo PDF</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <label class="form-label">Correo:</label>
        <input type="text" class="form-control" placeholder="Ingrese el correo" @bind-value="Correo" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal"  @onclick="ExportToPdfAndEmail">Enviar</button>
      </div>
    </div>
  </div>
</div>   


@{
    if(spinnerloading)
    {
    <div class="overlay">
        <div class="overlay__wrapper">
            <div class="overlay__spinner">
                  <div class="loading"> 
                      <div class="spinner-border text-light" role="status">
                        <span class="sr-only"></span>
                      </div>  
                      <p style="color: white;">@SpinnerMessage</p>
                  </div>
            </div>
        </div>
    </div>

    }
    else
    {
        <div class="table-container">
            <div class="table-wrapper">
                <table class="table table-bordered border-dark table-hover text-center">
                <thead>
                    <tr class="table-dark table-active text-uppercase">
                        <th>ID</th>
                        <th>DNI</th>
                        <th>PERSONAL</th>
                        <th>CUMPLEAÑOS</th>
                        <th>PUESTO</th>
                        <th>CARGO</th>
                        <th>FUNCION</th>
                        <th>MODALIDAD</th>
                        <th>ROL</th>
                        <th>TASA</th>
                        <th>EMPRESA</th>
                        <th>COORDINADOR</th>
                        <th>GABIN</th>
                        <th>PEOPLE</th>
                        <th>FECHA PROYECTO</th>
                        <th>FECHA CESE</th>
                        <th>DIAS AL CESE</th>
                        <th>PERIODO PRUEBA</th>
                        <th>INGRESO INDRA</th>
                        <th>DIAS EMPRESA</th>
                        <th>VACACIONES URGENTES</th>
                        <th>Equipo</th>
                        <th>CELULAR</th>
                        <th>CORREO</th>
                        <th>CPERSONAL</th>
                        <th>DIRECCION</th>
                        <th>DEPARTAMENTO</th>
                        <th>PROVINCIA</th>
                        <th>DISTRITO</th>
                        <th>OBSERVACION</th>
                        <th>F31</th>
                        <th>HOJA DE VIDA</th>
                        <th>ESTADO</th>
                        <th>ACCIONES</th>
                    </tr>
            </thead>
                <tbody>
                    @foreach (var personal in TempObPersonal)
                    {
                        <tr>
                          <td>@personal.ID</td>
                          <td>@personal.DNI</td>
                          <td>@personal.PERSONAL</td>
                          <td>@personal.CUMPLEAÑOS?.ToString("dd/MM/yyyy")</td>
                          <td>@personal.PUESTO</td>
                          <td>@personal.CARGO</td>
                          <td>@personal.FUNCION</td>
                          <td>@personal.MODALIDAD</td>
                          <td>@personal.ROL</td>
                          <td>@personal.TASA</td>
                          <td>@personal.EMPRESA</td>
                          <td>@personal.COORDINADOR</td>
                          <td>@personal.GABIN</td>
                          <td>@personal.PEOPLE</td>
                          <td>@personal.FECHA_PROYECTO.Value.ToString("dd-MM-yyyy")</td>
                          <td>@personal.FECHA_CESE?.ToString("dd/MM/yyyy")</td>
                          @{
                              // Calcular la diferencia de cese
                              var diasCese = CalcServices.CalcularDiasCese(personal.FECHA_CESE);
                          }
                          <td>@diasCese</td>
                          <td>@personal.PERIODO_PRUEBA</td>
                          <td>@personal.INGRESO_INDRA.Value.ToString("dd-MM-yyyy")</td>
                          @{
                              // Calcular la diferencia de días
                              var diasDiferenciaDeIngresoIndra = CalcServices.CalcularDiasDeDiferencia(personal.INGRESO_INDRA);
                          }
                            <td>@diasDiferenciaDeIngresoIndra</td>
                            <td>@personal.VACACIONES_URGENTES?.ToString("dd/MM/yyyy")</td>
                            <td>@personal.Equipo</td>
                            <td>@personal.CELULAR</td>
                            <td>@personal.CORREO</td>
                            <td>@personal.CPERSONAL</td>
                            <td>@personal.DIRECCION</td>  
                            <td>@personal.DEPARTAMENTO</td>
                            <td>@personal.PROVINCIA</td>
                            <td>@personal.DISTRITO</td>
                            <td>@personal.OBSERVACION</td>
                            <td>@personal.F31</td>
                            @{
                                if(personal.ARCHIVOPDF != null)
                                {
                                    <td>Sí</td>
                                }else{
                                    <td>No</td>
                                }
                            }
                            <td>@personal.ESTADO</td>
                            <td>
                            <a class="btn btn-success" href="personal/update/@personal.ID.ToString()"><i class="bi bi-pencil-square"></i> Actualizar</a>
                            @{
                                if(personal.ARCHIVOPDF != null)
                                {
                                <button class="btn btn-primary" @onclick="() => DownloadCV(personal.ID)" style="margin-top: 5px;"><i class="bi bi-file-earmark-pdf"></i> Ver Hoja de vida</button>
                                }
                            }
                            </td>
           
                        </tr>
                    }
                </tbody>
            </table>
        </div>  
    </div> 
    }
}

@code {
    List<PersonalEntity> ObPersonal = new List<PersonalEntity>();
    List<PersonalEntity> TempObPersonal = new List<PersonalEntity>();
    List<DepartamentoEntity> LstDepartamentos = new List<DepartamentoEntity>();
    List<ProvinciasEntity> LstProvincias = new List<ProvinciasEntity>();
    List<DistritosEntity> LstDistritos = new List<DistritosEntity>();

    string ID;
    string Dni;
    string Nombre;
    string Estado;
    string Equipo;
    string Departamento;
    string Provincia;
    string Distrito;
    string Correo;
    string SpinnerMessage = "";

    bool spinnerloading = false;
    DateTime? FechaIngreso;
    DateTime? FechaNacimiento;

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        spinnerloading = true;
        SpinnerMessage = "Cargando...";
        ObPersonal = await Task.Run(() => TB_Personal.PersonalList());
        TempObPersonal = ObPersonal;
        LstDepartamentos = TB_ubigeo_peru_departments.DepartmentslList();
        spinnerloading = false;
        SpinnerMessage = "";
    }

    private async Task ChangedFilters()
    {
        PreloadService.Show(SpinnerColor.Light,"Buscando...");
        var ProvinceNameUpper = TB_ubigeo_peru_provinces.GetProvinceName(Provincia);
        var DistrictNameUpper = TB_ubigeo_peru_districts.getDisctrictName(Distrito);
        TempObPersonal = await Task.Run(() => TB_Personal.FilterPersonal(Dni, Nombre, FechaIngreso, FechaNacimiento, Estado, Equipo, Departamento, ProvinceNameUpper, DistrictNameUpper, ID));
        PreloadService.Hide();
    }

    private void FilterProvince(ChangeEventArgs e)
    {
        var IdDepartamento = e.Value.ToString();

        if (IdDepartamento != "")
        {
            Provincia = "";
            Distrito = "";
            Departamento = TB_ubigeo_peru_departments.GetDepartmentName(IdDepartamento).ToUpper();
            LstProvincias = TB_ubigeo_peru_provinces.GetProvinceslByDepartmentId(IdDepartamento);
        }
        else
        {
            Departamento = "";
            Provincia = "";
            Distrito = "";
            LstProvincias = [];
            LstDistritos = [];
        }
    }

    private void FilterDistrict(string value)
    {
        var IdDistrito = value;

        if (IdDistrito != "")
        {
            Provincia = IdDistrito;
            Distrito = "";
            LstDistritos = TB_ubigeo_peru_districts.DistrictslByProvinceId(IdDistrito);
        }
        else
        {
            Provincia = "";
            Distrito = "";
            LstDistritos = [];
        }

    }

    private void GetDistrictName(string value)
    {
        var IdDistrito = value;


        if (IdDistrito != "")
        {
            Distrito = IdDistrito;
        }
        else
        {
            Distrito = "";
        }

    }

    private async Task ExportExcel()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Light, "Exportando archivo excel...");
            await ExpDocServ.ExportExcel(TempObPersonal);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al exportar archivo Excel: {ex.Message}");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Light, "Exportando archivo excel...");
            await ExpDocServ.ExportPdf(TempObPersonal);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al exportar archivo Excel: {ex.Message}");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task ExportToPdfAndEmail()
    {     
        bool IsCorreoAnEmail = false;
        if (Correo != null && Regex.IsMatch(Correo, @"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"))
        {
            IsCorreoAnEmail = true;
        }

        if (!IsCorreoAnEmail || Correo == null)
        {
            await SweetAlert.FireAsync(
                "Se debe de ingresar una dirección de correo.",
                "Se debe de ingresar una dirección de correo correcta para realizar en envio del PDF.",
                SweetAlertIcon.Error
            );
        }
        else
        {
            SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
        {
            Title = "¿Deseas enviar el pdf al siguiente correo? " + Correo + "",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });

            if (!string.IsNullOrEmpty(resultado.Value))
            {
                try
                {
                    PreloadService.Show(SpinnerColor.Light, "Enviando correo...");
                    await SendEmail();
                    await SweetAlert.FireAsync(
                        "El correo fue enviado con éxito",
                        "El correo fue enviado con éxito.",
                        SweetAlertIcon.Success
                    );  
                    PreloadService.Hide();
                }
                catch (Exception ex)
                {
                    PreloadService.Hide();
                    await SweetAlert.FireAsync(
                        "Error al enviar el correo",
                        "Ocurrió un error al enviar el correo electrónico: " + ex.Message,
                        SweetAlertIcon.Error
                    );  
                }
            }
            PreloadService.Hide();
            Correo = "";
        }
    }

    private async Task SendEmail()
    {
        // Generar el documento PDF
        PdfDocument document = ExpDocServ.ExportPdfToBeSendedToAnEmail(TempObPersonal);

        // Convertir el documento a bytes
        using MemoryStream stream = new MemoryStream();
        document.Save(stream, false);
        var bytes = stream.ToArray();
        string fileName = "Tabla.pdf";

        // Crear el mensaje de correo electrónico
        var message = new MimeMessage();
        message.From.Add(new MailboxAddress("Sistema de gestión de personal - Indra", "PruebaTest123Aaaa@hotmail.com"));
        message.To.Add(new MailboxAddress("Archivo PDF del sistema de gestión de personal.", Correo));
        message.Subject = "PDF Adjunto";

        var builder = new BodyBuilder();
        builder.TextBody = "Archivo PDF del sistema de gestión de personal.";
        builder.Attachments.Add(fileName, bytes);

        message.Body = builder.ToMessageBody();

        try
        {
            // Enviar el mensaje de correo electrónico
            using (var client = new SmtpClient())
            {
                await client.ConnectAsync("smtp.office365.com", 587, false); // Servidor SMTP y puerto para Outlook
                await client.AuthenticateAsync("PruebaTest123Aaaa@hotmail.com", "Canelita123"); // Correo y contraseña
                await client.SendAsync(message);
                await client.DisconnectAsync(true);
            }  
        }catch (Exception ex)
        {
            await SweetAlert.FireAsync(
                "Error al enviar el correo",
                "Ocurrió un error al enviar el correo electrónico: " + ex.Message,
                SweetAlertIcon.Error
            );  
        }

        Correo = "";
    }

    private async Task DownloadCV(double? PersonalId)
{

    PreloadService.Show(SpinnerColor.Light, "Abriendo documento...");

    // Obtener la entidad de la base de datos que contiene el campo ARCHIVOPDF
    PersonalEntity empleado = await TB_Personal.ObtenerEmpleadoPorId(PersonalId);

    // Verificar si el empleado y el campo ARCHIVOPDF no son nulos
    if (empleado != null && !string.IsNullOrEmpty(empleado.ARCHIVOPDF))
    {
        // Obtener la cadena Base64 del campo ARCHIVOPDF
        string pdfBase64 = empleado.ARCHIVOPDF;

         // Descargar el PDF en el navegador del usuario
        await _jsService.InvokeVoidAsync("showPdfInNewTab", pdfBase64, empleado.ID + "_documento.pdf");
    }
    else
    {
        Console.WriteLine("No se encontró ningún PDF adjunto para este empleado.");
    }

      PreloadService.Hide();
}


}
