﻿﻿@using Entities
@using Business
@using Personal.Lists
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavManager
@inject SweetAlertService SweetAlert
@inject ICalcServices CalcServices

<div>
    <EditForm Model="obPersonal" OnValidSubmit="@SavePersonal">
        <div class="form-group">
            <label class="form-label">*ID:</label>
            <InputText @bind-Value="id" class="form-control" MaxLength="6" />
        </div>

        <div class="form-group">
            <label class="form-label">*Documento de identidad:</label>
            <InputText @bind-Value="obPersonal.DNI" class="form-control" MaxLength="8" />
            <ValidationMessage For="@(() => obPersonal.DNI)"/>
        </div>

        <div class="form-group">
            <label class="form-label">*Personal:</label>
            <InputText @bind-Value="obPersonal.PERSONAL" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.PERSONAL)" />
        </div>

        <div class="form-group">
            <label class="form-label">Cumpleaños:</label>
            <InputDate @bind-Value="obPersonal.CUMPLEAÑOS" class="form-control"/>
            <ValidationMessage For="@(() => obPersonal.CUMPLEAÑOS)" />
        </div>

        <div class="form-group">
            <label class="form-label">Puesto:</label>
            <InputText @bind-Value="obPersonal.PUESTO" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.PUESTO)" />
        </div>

        <div class="form-group">
            <label class="form-label">Cargo:</label>
            <InputText @bind-Value="obPersonal.CARGO" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.CARGO)" />
        </div>

        <div class="form-group">
            <label class="form-label">Función:</label>
            <InputText @bind-Value="obPersonal.FUNCION" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.FUNCION)" />
        </div>

        <div class="form-group">
            <label class="form-label">Modalidad:</label>
            <InputSelect @bind-Value="obPersonal.MODALIDAD" class="form-control">
                <option value="">Seleccione una modalidad</option>
                <option value="PRESENCIAL">Presencial</option>
                <option value="REMOTO">Remoto</option>
                <option value="HIBRIDO">Hibrido</option>
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.MODALIDAD)" />
        </div>

       <div class="form-group">
            <label class="form-label">Rol:</label>
            <InputSelect @bind-Value="obPersonal.ROL" class="form-control">
                <option value="-1">Seleccione una modalidad</option>
                @{
                    foreach(var role in L_Lists.Roles)
                    {
                         <option value="@role">@role</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.ROL)" />
        </div>

        <div class="form-group">
            <label class="form-label">Tasa:</label>
            <InputSelect @bind-Value="obPersonal.TASA" class="form-control">
                <option value="">Seleccione una tasa</option>
                @{
                    foreach(var tasa in L_Lists.Tasas)
                    {
                         <option value="@tasa">@tasa</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.TASA)" />
        </div>

         <div class="form-group">
            <label class="form-label">Empresa:</label>
            <InputSelect @bind-Value="obPersonal.EMPRESA" class="form-control">
                <option value="">Seleccione una empresa</option>
                @{
                    foreach(var empresa in L_Lists.Empresas)
                    {
                         <option value="@empresa">@empresa</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.EMPRESA)" />
        </div>

        <div class="form-group">
            <label class="form-label">Coordinador:</label>
            <InputSelect @bind-Value="obPersonal.COORDINADOR" class="form-control">
                <option value="">Seleccione un coordinador</option>
                @{
                    foreach(var coordinador in L_Lists.Coordinadores)
                    {
                         <option value="@coordinador">@coordinador</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.COORDINADOR)" />
        </div>

        <div class="form-group">
            <label class="form-label">Gabin:</label>
            <InputText @bind-Value="obPersonal.GABIN" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.GABIN)" />
        </div>

        <div class="form-group">
            <label class="form-label">People:</label>
            <InputText @bind-Value="obPersonal.PEOPLE" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.PEOPLE)" />
        </div>

        <div class="form-group">
            <label class="form-label">Fecha Proyecto:</label>
            <InputDate @bind-Value="obPersonal.FECHA_PROYECTO" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.FECHA_PROYECTO)" />
        </div>

        <div class="form-group">
            <label class="form-label">Fecha al Cese:</label>
            <InputDate @bind-Value="obPersonal.FECHA_CESE" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Periodo de prueba (Meses):</label>
            <InputText @bind-Value="obPersonal.PERIODO_PRUEBA" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.PERIODO_PRUEBA)" />
        </div>

        <div class="form-group">
            <label class="form-label">Fecha ingreso Indra:</label>
            <InputDate @bind-Value="obPersonal.INGRESO_INDRA" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.INGRESO_INDRA)" />
        </div>

        <div class="form-group">
            <label class="form-label">Vacaciones Urgentes:</label>
            <InputDate @bind-Value="obPersonal.VACACIONES_URGENTES" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.VACACIONES_URGENTES)" />
        </div>

        <div class="form-group">
            <label class="form-label">Equipo:</label>
            <InputSelect @bind-Value="obPersonal.Equipo" class="form-control">
                <option value="">Seleccione un equipo</option>
                <option value="No">No</option>
                <option value="Laptop">Laptop</option>
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.Equipo)" />
        </div>

        <div class="form-group">
            <label class="form-label">Número celular</label>
            <InputNumber @bind-Value="obPersonal.CELULAR" MaxLength="9" class="form-control" AllowNegativeNumbers="false" />
            <ValidationMessage For="@(() => obPersonal.CELULAR)" />
        </div>

        <div class="form-group">
            <label class="form-label">Correo</label>
            <InputText @bind-Value="obPersonal.CORREO" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.CORREO)" />
        </div>

        <div class="form-group">
            <label class="form-label">Correo personal</label>
            <InputText @bind-Value="obPersonal.CPERSONAL" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.CPERSONAL)" />
        </div>

        <div class="form-group">
            <label class="form-label">Dirección</label>
            <InputText @bind-Value="obPersonal.DIRECCION" class="form-control" />
            <ValidationMessage For="@(() => obPersonal.DIRECCION)" />
        </div>

        <div class="form-group">
            <label class="form-label">Departamento</label>
            <select class="form-control" @onchange="FilterProvince">
                <option value="">Seleccione un departamento</option>
                @{
                    foreach (var departamento in LstDepartamentos)
                    {
                        <option value="@departamento.id">@departamento.name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => obPersonal.DEPARTAMENTO)" />
        </div>

        <div class="form-group">
            <label class="form-label">Provincia:</label>
            <InputSelect class="form-control" Value="@Provincia" ValueExpression="@(()=>@Provincia)" ValueChanged="@((string value) => FilterDistrict(value))">
                <option value="">
                    Seleccione una provincia</option">
                @{
                    foreach (var provincia in LstProvincias)
                    {
                        <option value="@provincia.id">@provincia.name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.PROVINCIA)" />
        </div>

        <div class="form-group">
            <label class="form-label">Distrito:</label>
            <InputSelect class="form-control" Value="@Distrito" ValueExpression="@(()=>@Distrito)" ValueChanged="@((string value) => GetDistrictName(value))">
                <option value="">Seleccione un distrito</option>
                @{
                    foreach (var distrito in LstDistritos)
                    {
                        <option value="@distrito.id">@distrito.name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => obPersonal.DISTRITO)" />
        </div>
  
        <div class="form-group">
            <label class="form-label">Observación</label>
            <InputText @bind-Value="obPersonal.OBSERVACION" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">F31</label>
            <InputText @bind-Value="obPersonal.F31" class="form-control" />
        </div>


        <BlazorInputFile.InputFile OnChange="HandleFileSelection" />

  
        <hr />
        <div>
            <button type="submit" class="btn btn-primary">Agregar Personal</button>
        </div>
        <hr />
    </EditForm>
</div>

@pdfBase64

@code {

    PersonalEntity obPersonal = new PersonalEntity();
    List<DepartamentoEntity> LstDepartamentos = new List<DepartamentoEntity>();
    List<ProvinciasEntity> LstProvincias = new List<ProvinciasEntity>();
    List<DistritosEntity> LstDistritos = new List<DistritosEntity>();
    List<L_Lists> LstList = new List<L_Lists>();

    string id;
    string Departamento;
    string Provincia;
    string Distrito;
    private EditContext editContext;

    private string pdfBase64;

    protected override async Task OnInitializedAsync()
    {
        obPersonal.CUMPLEAÑOS = DateTime.Now;
        obPersonal.FECHA_PROYECTO = DateTime.Now;
        obPersonal.INGRESO_INDRA = DateTime.Now;
        editContext = new EditContext(obPersonal);
        LstDepartamentos = TB_ubigeo_peru_departments.DepartmentslList();
    }
    
    
    //Debo hacer qeu se convierta el pdf a Base64 - ALTER TABLE TBPersonal ADD ARCHIVOPDF NVARCHAR(MAX) NULL;
    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            byte[] pdfBytes = ms.ToArray();

            // Convertir los bytes del PDF a una cadena Base64
            pdfBase64 = Convert.ToBase64String(pdfBytes);
        }
    }

    private async void SavePersonal()
    {
        bool VerificarIdExistente = false;

        if (editContext.Validate())
        {
            if (id != null)
            {
                VerificarIdExistente = TB_Personal.CompareId(Double.Parse(id));
            }
            else
            {
                VerificarIdExistente = false;
            }

            if (VerificarIdExistente)
            {
                await SweetAlert.FireAsync(
                    "El ID del empleado ingresado ya está en uso.",
                    "Por favor, ingrese un ID diferente.",
                    SweetAlertIcon.Error
                );
            }
            else
            {
                bool BId = false;
                if (id == "" || id == null)
                {
                    await SweetAlert.FireAsync(
                        "El ID del empleado se encuentra vacío.",
                        "Añada el ID del empleado para añadir al empleado.",
                        SweetAlertIcon.Error
                    );
                }
                else
                {
                    BId = true;
                }

                if (BId)
                {
                    obPersonal.DIAS_AL_CESE = CalcularDiferencia(obPersonal.FECHA_CESE, DateTime.Now);
                    SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
                        {
                            Title = "Quieres agregar información de este colaborador",
                            Icon = SweetAlertIcon.Warning,
                            ShowCancelButton = true,
                            ConfirmButtonText = "Si",
                            CancelButtonText = "No"
                        });

                    if (!string.IsNullOrEmpty(resultado.Value))
                    {
                        obPersonal.ID = Double.Parse(id);
                        obPersonal.ARCHIVOPDF = pdfBase64;
                        obPersonal.DEPARTAMENTO = Departamento;
                        obPersonal.PROVINCIA = TB_ubigeo_peru_provinces.GetProvinceName(Provincia);
                        obPersonal.DISTRITO = TB_ubigeo_peru_districts.getDisctrictName(Distrito);
                        obPersonal.ESTADO = "Activo";
                        TB_Personal.CreatePersonal(obPersonal);
                        NavManager.NavigateTo("/");
                    }
                }
            }
        }
        else
        {
            await SweetAlert.FireAsync(
                "El ID del empleado ingresado ya está en uso.",
                "Por favor, ingrese un ID diferente.",
                SweetAlertIcon.Error
            );
        }
    }

    private void FilterProvince(ChangeEventArgs e)
    {
        var IdDepartamento = e.Value.ToString();

        if (IdDepartamento != "")
        {
            Provincia = "";
            Distrito = "";
            Departamento = TB_ubigeo_peru_departments.GetDepartmentName(IdDepartamento).ToUpper();
            LstProvincias = TB_ubigeo_peru_provinces.GetProvinceslByDepartmentId(IdDepartamento);
        }
        else
        {
            Departamento = "";
            Provincia = "";
            Distrito = "";
            LstProvincias = [];
            LstDistritos = [];
        }
    }
    3.
    private void FilterDistrict(string value)
    {
        var IdDistrito = value;

        if (IdDistrito != "")
        {
            Provincia = IdDistrito;
            Distrito = "";
            LstDistritos = TB_ubigeo_peru_districts.DistrictslByProvinceId(IdDistrito);
        }
        else
        {
            Provincia = "";
            Distrito = "";
            LstDistritos = [];
        }

    }

    private void GetDistrictName(string value)
    {
        var IdDistrito = value;


        if (IdDistrito != "")
        {
            Distrito = IdDistrito;
        }
        else
        {
            Distrito = "";
        }

    }

    static int CalcularDiferencia(DateTime? fecha, DateTime fechaActual)
        {
            if (fecha == null || fecha == DateTime.MinValue)
        {
            return -1;
        }
            else
        {
            TimeSpan diferencia = fecha.Value - fechaActual;
            return (int)diferencia.TotalDays;
        }
     }
}