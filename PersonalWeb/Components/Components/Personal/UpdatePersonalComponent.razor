﻿@using Entities
@using Business
@inject NavigationManager NavManager
@inject SweetAlertService SweetAlert

<div>
    <EditForm Model="obPersonal">

        <div class="form-group">
            <label class="form-label">Personal:</label>
            <InputText @bind-Value="obPersonal.PERSONAL" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Cumpleaños:</label>
            <InputDate @bind-Value="obPersonal.CUMPLEAÑOS" class="form-control"/>
        </div>

        <div class="form-group">
            <label class="form-label">Puesto:</label>
            <InputText @bind-Value="obPersonal.PUESTO" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Cargo:</label>
            <InputText @bind-Value="obPersonal.CARGO" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Función:</label>
            <InputText @bind-Value="obPersonal.FUNCION" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Modalidad:</label>
            <InputSelect @bind-Value="obPersonal.MODALIDAD" class="form-control">
                <option value="">Seleccione una modalidad</option>
                <option value="PRESENCIAL">Presencial</option>
                <option value="REMOTO">Remoto</option>
                <option value="HIBRIDO">Hibrido</option>
            </InputSelect>
        </div>

       <div class="form-group">
            <label class="form-label">Rol:</label>
            <InputSelect @bind-Value="obPersonal.ROL" class="form-control">
                <option value="">Seleccione una modalidad</option>
                @{
                    foreach(var role in L_Lists.Roles)
                    {
                         <option value="@role">@role</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">Tasa:</label>
            <InputSelect @bind-Value="obPersonal.TASA" class="form-control">
                <option value="">Seleccione una tasa</option>
                @{
                    foreach(var tasa in L_Lists.Tasas)
                    {
                         <option value="@tasa">@tasa</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">Empresa:</label>
            <InputSelect @bind-Value="obPersonal.EMPRESA" class="form-control">
                <option value="">Seleccione una empresa</option>
                @{
                    foreach(var empresa in L_Lists.Empresas)
                    {
                         <option value="@empresa">@empresa</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">Coordinador:</label>
            <InputSelect @bind-Value="obPersonal.COORDINADOR" class="form-control">
                <option value="">Seleccione un coordinador</option>
                @{
                    foreach(var coordinador in L_Lists.Coordinadores)
                    {
                         <option value="@coordinador">@coordinador</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">Gabin:</label>
            <InputText @bind-Value="obPersonal.GABIN" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">People:</label>
            <InputText @bind-Value="obPersonal.PEOPLE" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Fecha Proyecto:</label>
            <InputDate @bind-Value="obPersonal.FECHA_PROYECTO" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Fecha al Cese:</label>
            <InputDate @bind-Value="obPersonal.FECHA_CESE" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Periodo de prueba (Meses):</label>
            <InputText @bind-Value="obPersonal.PERIODO_PRUEBA" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Fecha ingreso Indra:</label>
            <InputDate @bind-Value="obPersonal.INGRESO_INDRA" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Vacaciones Urgentes:</label>
            <InputDate @bind-Value="obPersonal.VACACIONES_URGENTES" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Equipo:</label>
            <InputSelect @bind-Value="obPersonal.Equipo" class="form-control">
                <option value="">Seleccione un equipo</option>
                <option value="No">No</option>
                <option value="Laptop">Laptop</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">Número celular</label>
            <InputNumber @bind-Value="obPersonal.CELULAR" MaxLength="9" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Correo</label>
            <InputText @bind-Value="obPersonal.CORREO" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Correo personal</label>
            <InputText @bind-Value="obPersonal.CPERSONAL" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Dirección</label>
            <InputText @bind-Value="obPersonal.DIRECCION" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Departamento</label>
            <select class="form-control" @onchange="@FilterProvince" value="@Departamento">
                <option value="">Seleccione un departamento</option>
                @{
                    foreach (var departamento in LstDepartamentos)
                    {
                        <option value="@departamento.id">@departamento.name</option>
                    }
                }
            </select>
        </div>

        @*
        @obPersonal.DEPARTAMENTO
        @Departamento 
        *@

        <div class="form-group">
            <label class="form-label">Provincia</label>
            <select class="form-control" @onchange="@FilterDistrict" value="@Provincia">
                <option value="">Seleccione una provincia</option>
                @{
                    foreach (var provincia in LstProvincias)
                    {
                        <option value="@provincia.id">@provincia.name</option>
                    }
                }
            </select>
        </div>

        @*
        @obPersonal.PROVINCIA
        @Provincia
        *@

        <div class="form-group">
            <label class="form-label">Distrito</label>
            <select class="form-control" @onchange="@GetDistrictName" value="@Distrito">
                <option value="">Seleccione un distrito</option>
                @{
                    foreach (var distrito in LstDistritos)
                    {
                        <option value="@distrito.id">@distrito.name</option>
                    }
                }
            </select>
        </div>

         @* 
        @obPersonal.DISTRITO
        @Distrito 
        *@

        <div class="form-group">
            <label class="form-label">Observación</label>
            <InputText @bind-Value="obPersonal.OBSERVACION" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">F31</label>
            <InputText @bind-Value="obPersonal.F31" class="form-control" />
        </div>

        <hr />

        <div>
            <button type="button" class="btn btn-primary" @onclick="UpdatePersonal">Actualizar Personal</button>
             <button type="button" class="btn btn-success" @onclick="ChangeStatus">Cambiar estado a @ReversedEstado</button>
            <button type="button" class="btn btn-danger" @onclick="RemovePersonal">Eliminar Personal</button>
        </div>
        <hr />
    </EditForm>
</div>

@code {
    PersonalEntity obPersonal = new PersonalEntity();
    List<DepartamentoEntity> LstDepartamentos = new List<DepartamentoEntity>();
    List<ProvinciasEntity> LstProvincias = new List<ProvinciasEntity>();
    List<DistritosEntity> LstDistritos = new List<DistritosEntity>();
    List<L_Lists> LstList = new List<L_Lists>();

    string id;
    string Departamento { get; set; }
    string Provincia { get; set; }
    string Distrito { get; set; }
    string ReversedEstado { get; set; }

    [Parameter]
    public string IdPersonal { get; set; }


    protected override async Task OnInitializedAsync()
    {
        LstDepartamentos = TB_ubigeo_peru_departments.DepartmentslList().ToList();
        obPersonal = TB_Personal.PersonalById(Double.Parse(IdPersonal));

        Departamento = TB_ubigeo_peru_departments.GetDepartmentId(obPersonal.DEPARTAMENTO);

        LstProvincias = TB_ubigeo_peru_provinces.ProvinceslByDepartmentId(Departamento);
        Provincia = TB_ubigeo_peru_provinces.GetProvincetId(obPersonal.PROVINCIA);

        Distrito = TB_ubigeo_peru_districts.GetDisctrictId(obPersonal.PROVINCIA);
        LstDistritos = TB_ubigeo_peru_districts.DistrictslByProvinceId(TB_ubigeo_peru_provinces.GetProvincetId(obPersonal.PROVINCIA));

        ReversedEstado = obPersonal.ESTADO == "Inactivo" ? "Activo" : "Inactivo"; 
    }

    private async void UpdatePersonal()
    {
        obPersonal.DIAS_AL_CESE = CalcularDiferencia(obPersonal.FECHA_CESE, DateTime.Now);

        SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Quieres modificar información de " + obPersonal.PERSONAL,
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
        });

        if (!string.IsNullOrEmpty(resultado.Value))
        {
            await SweetAlert.FireAsync(
              "La información fue actualizada." ,
              "La información fue actualizada con éxito.",
              SweetAlertIcon.Success
              );

            TB_Personal.UpdatePersonal(obPersonal);
            NavManager.NavigateTo("");
        }
    }


        private async void ChangeStatus()
    {
         SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Quieres cambiar el estado de " + obPersonal.PERSONAL,
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
        });

        if (!string.IsNullOrEmpty(resultado.Value))
        {
            await SweetAlert.FireAsync(
              "El estado de este personal actualizado." ,
              "El estado de este personal fue actualizado con éxito.",
              SweetAlertIcon.Success
              );

            string text;
            if (obPersonal.ESTADO == "Activo")
            {
                text = "Inactivo";
            }
            else
            {
                text = "Activo";
            }

            TB_Personal.ChangePersonalStatus(obPersonal,text);
            NavManager.NavigateTo("");
        }
    }


        private async void RemovePersonal()
    {
         SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Quieres eliminar toda información de " + obPersonal.PERSONAL,
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
        });

        if (!string.IsNullOrEmpty(resultado.Value))
        {
            await SweetAlert.FireAsync(
              "El personal fue eliminado." ,
              "El personal fue eliminado con éxito.",
              SweetAlertIcon.Success
              );

            TB_Personal.RemovePersonal(obPersonal);
            NavManager.NavigateTo("");
        }
    }

    private void FilterProvince(ChangeEventArgs e)
    {
        var IdDepartamento = e.Value.ToString();

        if (IdDepartamento != "")
        {
            Provincia = "";
            Distrito = "";
            obPersonal.DEPARTAMENTO = char.ToUpper(TB_ubigeo_peru_departments.GetDepartmentName(IdDepartamento)[0]) + TB_ubigeo_peru_departments.GetDepartmentName(IdDepartamento).Substring(1).ToLower();
            LstProvincias = TB_ubigeo_peru_provinces.ProvinceslByDepartmentId(IdDepartamento);
        }
        else
        {
            Departamento = "";
            Provincia = "";
            Distrito = "";
            LstProvincias = [];
            LstDistritos = [];
        }
    }

    private void FilterDistrict(ChangeEventArgs e)
    {
        var IdDistrito = e.Value.ToString();

        if (IdDistrito != "")
        {
            Distrito = "";
            obPersonal.PROVINCIA = char.ToUpper(TB_ubigeo_peru_provinces.getProvinceName(IdDistrito)[0]) + TB_ubigeo_peru_provinces.getProvinceName(IdDistrito).Substring(1).ToLower();
            LstDistritos = TB_ubigeo_peru_districts.DistrictslByProvinceId(IdDistrito);
        }
        else
        {
            Provincia = "";
            Distrito = "";
            LstDistritos = [];
        }

    }

    private void GetDistrictName(ChangeEventArgs e)
    {
        var IdDistrito = e.Value.ToString();


        if (IdDistrito != "")
        {
            obPersonal.DISTRITO = char.ToUpper(TB_ubigeo_peru_districts.getDisctrictName(IdDistrito)[0]) + TB_ubigeo_peru_districts.getDisctrictName(IdDistrito).Substring(1).ToLower();
        }
        else
        {
            Distrito = "";
        }

    }

        static int CalcularDiferencia(DateTime? fecha, DateTime fechaActual)
        {
            if (fecha == null || fecha == DateTime.MinValue)
        {
            return -1;
        }
            else
        {
            TimeSpan diferencia = fecha.Value - fechaActual;
            return (int)diferencia.TotalDays;
        }

     }
}